// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/ADMIN/app/ent/department"
	"github.com/ADMIN/app/ent/diagnose"
	"github.com/ADMIN/app/ent/disease"
	"github.com/ADMIN/app/ent/doctor"
	"github.com/ADMIN/app/ent/patient"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDepartment = "Department"
	TypeDiagnose   = "Diagnose"
	TypeDisease    = "Disease"
	TypeDoctor     = "Doctor"
	TypePatient    = "Patient"
)

// DepartmentMutation represents an operation that mutate the Departments
// nodes in the graph.
type DepartmentMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	_Department_Name           *string
	clearedFields              map[string]struct{}
	department_diagnose        map[int]struct{}
	removeddepartment_diagnose map[int]struct{}
	done                       bool
	oldValue                   func(context.Context) (*Department, error)
}

var _ ent.Mutation = (*DepartmentMutation)(nil)

// departmentOption allows to manage the mutation configuration using functional options.
type departmentOption func(*DepartmentMutation)

// newDepartmentMutation creates new mutation for $n.Name.
func newDepartmentMutation(c config, op Op, opts ...departmentOption) *DepartmentMutation {
	m := &DepartmentMutation{
		config:        c,
		op:            op,
		typ:           TypeDepartment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDepartmentID sets the id field of the mutation.
func withDepartmentID(id int) departmentOption {
	return func(m *DepartmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Department
		)
		m.oldValue = func(ctx context.Context) (*Department, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Department.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDepartment sets the old Department of the mutation.
func withDepartment(node *Department) departmentOption {
	return func(m *DepartmentMutation) {
		m.oldValue = func(context.Context) (*Department, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DepartmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DepartmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DepartmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDepartmentName sets the Department_Name field.
func (m *DepartmentMutation) SetDepartmentName(s string) {
	m._Department_Name = &s
}

// DepartmentName returns the Department_Name value in the mutation.
func (m *DepartmentMutation) DepartmentName() (r string, exists bool) {
	v := m._Department_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentName returns the old Department_Name value of the Department.
// If the Department object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DepartmentMutation) OldDepartmentName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepartmentName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepartmentName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentName: %w", err)
	}
	return oldValue.DepartmentName, nil
}

// ResetDepartmentName reset all changes of the "Department_Name" field.
func (m *DepartmentMutation) ResetDepartmentName() {
	m._Department_Name = nil
}

// AddDepartmentDiagnoseIDs adds the department_diagnose edge to Diagnose by ids.
func (m *DepartmentMutation) AddDepartmentDiagnoseIDs(ids ...int) {
	if m.department_diagnose == nil {
		m.department_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.department_diagnose[ids[i]] = struct{}{}
	}
}

// RemoveDepartmentDiagnoseIDs removes the department_diagnose edge to Diagnose by ids.
func (m *DepartmentMutation) RemoveDepartmentDiagnoseIDs(ids ...int) {
	if m.removeddepartment_diagnose == nil {
		m.removeddepartment_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddepartment_diagnose[ids[i]] = struct{}{}
	}
}

// RemovedDepartmentDiagnose returns the removed ids of department_diagnose.
func (m *DepartmentMutation) RemovedDepartmentDiagnoseIDs() (ids []int) {
	for id := range m.removeddepartment_diagnose {
		ids = append(ids, id)
	}
	return
}

// DepartmentDiagnoseIDs returns the department_diagnose ids in the mutation.
func (m *DepartmentMutation) DepartmentDiagnoseIDs() (ids []int) {
	for id := range m.department_diagnose {
		ids = append(ids, id)
	}
	return
}

// ResetDepartmentDiagnose reset all changes of the "department_diagnose" edge.
func (m *DepartmentMutation) ResetDepartmentDiagnose() {
	m.department_diagnose = nil
	m.removeddepartment_diagnose = nil
}

// Op returns the operation name.
func (m *DepartmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Department).
func (m *DepartmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DepartmentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Department_Name != nil {
		fields = append(fields, department.FieldDepartmentName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DepartmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case department.FieldDepartmentName:
		return m.DepartmentName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DepartmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case department.FieldDepartmentName:
		return m.OldDepartmentName(ctx)
	}
	return nil, fmt.Errorf("unknown Department field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case department.FieldDepartmentName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentName(v)
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DepartmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DepartmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Department numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DepartmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DepartmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DepartmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Department nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DepartmentMutation) ResetField(name string) error {
	switch name {
	case department.FieldDepartmentName:
		m.ResetDepartmentName()
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DepartmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.department_diagnose != nil {
		edges = append(edges, department.EdgeDepartmentDiagnose)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DepartmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeDepartmentDiagnose:
		ids := make([]ent.Value, 0, len(m.department_diagnose))
		for id := range m.department_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DepartmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddepartment_diagnose != nil {
		edges = append(edges, department.EdgeDepartmentDiagnose)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DepartmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeDepartmentDiagnose:
		ids := make([]ent.Value, 0, len(m.removeddepartment_diagnose))
		for id := range m.removeddepartment_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DepartmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DepartmentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DepartmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Department unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DepartmentMutation) ResetEdge(name string) error {
	switch name {
	case department.EdgeDepartmentDiagnose:
		m.ResetDepartmentDiagnose()
		return nil
	}
	return fmt.Errorf("unknown Department edge %s", name)
}

// DiagnoseMutation represents an operation that mutate the Diagnoses
// nodes in the graph.
type DiagnoseMutation struct {
	config
	op                Op
	typ               string
	id                *int
	clearedFields     map[string]struct{}
	disease           *int
	cleareddisease    bool
	department        *int
	cleareddepartment bool
	patient           *int
	clearedpatient    bool
	doctor            *int
	cleareddoctor     bool
	done              bool
	oldValue          func(context.Context) (*Diagnose, error)
}

var _ ent.Mutation = (*DiagnoseMutation)(nil)

// diagnoseOption allows to manage the mutation configuration using functional options.
type diagnoseOption func(*DiagnoseMutation)

// newDiagnoseMutation creates new mutation for $n.Name.
func newDiagnoseMutation(c config, op Op, opts ...diagnoseOption) *DiagnoseMutation {
	m := &DiagnoseMutation{
		config:        c,
		op:            op,
		typ:           TypeDiagnose,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiagnoseID sets the id field of the mutation.
func withDiagnoseID(id int) diagnoseOption {
	return func(m *DiagnoseMutation) {
		var (
			err   error
			once  sync.Once
			value *Diagnose
		)
		m.oldValue = func(ctx context.Context) (*Diagnose, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Diagnose.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiagnose sets the old Diagnose of the mutation.
func withDiagnose(node *Diagnose) diagnoseOption {
	return func(m *DiagnoseMutation) {
		m.oldValue = func(context.Context) (*Diagnose, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiagnoseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiagnoseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DiagnoseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDiseaseID sets the disease edge to Disease by id.
func (m *DiagnoseMutation) SetDiseaseID(id int) {
	m.disease = &id
}

// ClearDisease clears the disease edge to Disease.
func (m *DiagnoseMutation) ClearDisease() {
	m.cleareddisease = true
}

// DiseaseCleared returns if the edge disease was cleared.
func (m *DiagnoseMutation) DiseaseCleared() bool {
	return m.cleareddisease
}

// DiseaseID returns the disease id in the mutation.
func (m *DiagnoseMutation) DiseaseID() (id int, exists bool) {
	if m.disease != nil {
		return *m.disease, true
	}
	return
}

// DiseaseIDs returns the disease ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DiseaseID instead. It exists only for internal usage by the builders.
func (m *DiagnoseMutation) DiseaseIDs() (ids []int) {
	if id := m.disease; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDisease reset all changes of the "disease" edge.
func (m *DiagnoseMutation) ResetDisease() {
	m.disease = nil
	m.cleareddisease = false
}

// SetDepartmentID sets the department edge to Department by id.
func (m *DiagnoseMutation) SetDepartmentID(id int) {
	m.department = &id
}

// ClearDepartment clears the department edge to Department.
func (m *DiagnoseMutation) ClearDepartment() {
	m.cleareddepartment = true
}

// DepartmentCleared returns if the edge department was cleared.
func (m *DiagnoseMutation) DepartmentCleared() bool {
	return m.cleareddepartment
}

// DepartmentID returns the department id in the mutation.
func (m *DiagnoseMutation) DepartmentID() (id int, exists bool) {
	if m.department != nil {
		return *m.department, true
	}
	return
}

// DepartmentIDs returns the department ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DepartmentID instead. It exists only for internal usage by the builders.
func (m *DiagnoseMutation) DepartmentIDs() (ids []int) {
	if id := m.department; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDepartment reset all changes of the "department" edge.
func (m *DiagnoseMutation) ResetDepartment() {
	m.department = nil
	m.cleareddepartment = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *DiagnoseMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *DiagnoseMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *DiagnoseMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *DiagnoseMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *DiagnoseMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *DiagnoseMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (m *DiagnoseMutation) SetDoctorID(id int) {
	m.doctor = &id
}

// ClearDoctor clears the doctor edge to Doctor.
func (m *DiagnoseMutation) ClearDoctor() {
	m.cleareddoctor = true
}

// DoctorCleared returns if the edge doctor was cleared.
func (m *DiagnoseMutation) DoctorCleared() bool {
	return m.cleareddoctor
}

// DoctorID returns the doctor id in the mutation.
func (m *DiagnoseMutation) DoctorID() (id int, exists bool) {
	if m.doctor != nil {
		return *m.doctor, true
	}
	return
}

// DoctorIDs returns the doctor ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DoctorID instead. It exists only for internal usage by the builders.
func (m *DiagnoseMutation) DoctorIDs() (ids []int) {
	if id := m.doctor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDoctor reset all changes of the "doctor" edge.
func (m *DiagnoseMutation) ResetDoctor() {
	m.doctor = nil
	m.cleareddoctor = false
}

// Op returns the operation name.
func (m *DiagnoseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Diagnose).
func (m *DiagnoseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DiagnoseMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DiagnoseMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DiagnoseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Diagnose field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiagnoseMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Diagnose field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DiagnoseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DiagnoseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiagnoseMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Diagnose numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DiagnoseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DiagnoseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiagnoseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Diagnose nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DiagnoseMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Diagnose field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DiagnoseMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.disease != nil {
		edges = append(edges, diagnose.EdgeDisease)
	}
	if m.department != nil {
		edges = append(edges, diagnose.EdgeDepartment)
	}
	if m.patient != nil {
		edges = append(edges, diagnose.EdgePatient)
	}
	if m.doctor != nil {
		edges = append(edges, diagnose.EdgeDoctor)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DiagnoseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case diagnose.EdgeDisease:
		if id := m.disease; id != nil {
			return []ent.Value{*id}
		}
	case diagnose.EdgeDepartment:
		if id := m.department; id != nil {
			return []ent.Value{*id}
		}
	case diagnose.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case diagnose.EdgeDoctor:
		if id := m.doctor; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DiagnoseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DiagnoseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DiagnoseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddisease {
		edges = append(edges, diagnose.EdgeDisease)
	}
	if m.cleareddepartment {
		edges = append(edges, diagnose.EdgeDepartment)
	}
	if m.clearedpatient {
		edges = append(edges, diagnose.EdgePatient)
	}
	if m.cleareddoctor {
		edges = append(edges, diagnose.EdgeDoctor)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DiagnoseMutation) EdgeCleared(name string) bool {
	switch name {
	case diagnose.EdgeDisease:
		return m.cleareddisease
	case diagnose.EdgeDepartment:
		return m.cleareddepartment
	case diagnose.EdgePatient:
		return m.clearedpatient
	case diagnose.EdgeDoctor:
		return m.cleareddoctor
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DiagnoseMutation) ClearEdge(name string) error {
	switch name {
	case diagnose.EdgeDisease:
		m.ClearDisease()
		return nil
	case diagnose.EdgeDepartment:
		m.ClearDepartment()
		return nil
	case diagnose.EdgePatient:
		m.ClearPatient()
		return nil
	case diagnose.EdgeDoctor:
		m.ClearDoctor()
		return nil
	}
	return fmt.Errorf("unknown Diagnose unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DiagnoseMutation) ResetEdge(name string) error {
	switch name {
	case diagnose.EdgeDisease:
		m.ResetDisease()
		return nil
	case diagnose.EdgeDepartment:
		m.ResetDepartment()
		return nil
	case diagnose.EdgePatient:
		m.ResetPatient()
		return nil
	case diagnose.EdgeDoctor:
		m.ResetDoctor()
		return nil
	}
	return fmt.Errorf("unknown Diagnose edge %s", name)
}

// DiseaseMutation represents an operation that mutate the Diseases
// nodes in the graph.
type DiseaseMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	_Disease_Name           *string
	clearedFields           map[string]struct{}
	disease_diagnose        map[int]struct{}
	removeddisease_diagnose map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*Disease, error)
}

var _ ent.Mutation = (*DiseaseMutation)(nil)

// diseaseOption allows to manage the mutation configuration using functional options.
type diseaseOption func(*DiseaseMutation)

// newDiseaseMutation creates new mutation for $n.Name.
func newDiseaseMutation(c config, op Op, opts ...diseaseOption) *DiseaseMutation {
	m := &DiseaseMutation{
		config:        c,
		op:            op,
		typ:           TypeDisease,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiseaseID sets the id field of the mutation.
func withDiseaseID(id int) diseaseOption {
	return func(m *DiseaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Disease
		)
		m.oldValue = func(ctx context.Context) (*Disease, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Disease.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDisease sets the old Disease of the mutation.
func withDisease(node *Disease) diseaseOption {
	return func(m *DiseaseMutation) {
		m.oldValue = func(context.Context) (*Disease, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiseaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiseaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DiseaseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDiseaseName sets the Disease_Name field.
func (m *DiseaseMutation) SetDiseaseName(s string) {
	m._Disease_Name = &s
}

// DiseaseName returns the Disease_Name value in the mutation.
func (m *DiseaseMutation) DiseaseName() (r string, exists bool) {
	v := m._Disease_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldDiseaseName returns the old Disease_Name value of the Disease.
// If the Disease object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiseaseMutation) OldDiseaseName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDiseaseName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDiseaseName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiseaseName: %w", err)
	}
	return oldValue.DiseaseName, nil
}

// ResetDiseaseName reset all changes of the "Disease_Name" field.
func (m *DiseaseMutation) ResetDiseaseName() {
	m._Disease_Name = nil
}

// AddDiseaseDiagnoseIDs adds the disease_diagnose edge to Diagnose by ids.
func (m *DiseaseMutation) AddDiseaseDiagnoseIDs(ids ...int) {
	if m.disease_diagnose == nil {
		m.disease_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.disease_diagnose[ids[i]] = struct{}{}
	}
}

// RemoveDiseaseDiagnoseIDs removes the disease_diagnose edge to Diagnose by ids.
func (m *DiseaseMutation) RemoveDiseaseDiagnoseIDs(ids ...int) {
	if m.removeddisease_diagnose == nil {
		m.removeddisease_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddisease_diagnose[ids[i]] = struct{}{}
	}
}

// RemovedDiseaseDiagnose returns the removed ids of disease_diagnose.
func (m *DiseaseMutation) RemovedDiseaseDiagnoseIDs() (ids []int) {
	for id := range m.removeddisease_diagnose {
		ids = append(ids, id)
	}
	return
}

// DiseaseDiagnoseIDs returns the disease_diagnose ids in the mutation.
func (m *DiseaseMutation) DiseaseDiagnoseIDs() (ids []int) {
	for id := range m.disease_diagnose {
		ids = append(ids, id)
	}
	return
}

// ResetDiseaseDiagnose reset all changes of the "disease_diagnose" edge.
func (m *DiseaseMutation) ResetDiseaseDiagnose() {
	m.disease_diagnose = nil
	m.removeddisease_diagnose = nil
}

// Op returns the operation name.
func (m *DiseaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Disease).
func (m *DiseaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DiseaseMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Disease_Name != nil {
		fields = append(fields, disease.FieldDiseaseName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DiseaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case disease.FieldDiseaseName:
		return m.DiseaseName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DiseaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case disease.FieldDiseaseName:
		return m.OldDiseaseName(ctx)
	}
	return nil, fmt.Errorf("unknown Disease field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case disease.FieldDiseaseName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiseaseName(v)
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DiseaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DiseaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DiseaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DiseaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiseaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Disease nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DiseaseMutation) ResetField(name string) error {
	switch name {
	case disease.FieldDiseaseName:
		m.ResetDiseaseName()
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DiseaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.disease_diagnose != nil {
		edges = append(edges, disease.EdgeDiseaseDiagnose)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DiseaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeDiseaseDiagnose:
		ids := make([]ent.Value, 0, len(m.disease_diagnose))
		for id := range m.disease_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DiseaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddisease_diagnose != nil {
		edges = append(edges, disease.EdgeDiseaseDiagnose)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DiseaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeDiseaseDiagnose:
		ids := make([]ent.Value, 0, len(m.removeddisease_diagnose))
		for id := range m.removeddisease_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DiseaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DiseaseMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DiseaseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DiseaseMutation) ResetEdge(name string) error {
	switch name {
	case disease.EdgeDiseaseDiagnose:
		m.ResetDiseaseDiagnose()
		return nil
	}
	return fmt.Errorf("unknown Disease edge %s", name)
}

// DoctorMutation represents an operation that mutate the Doctors
// nodes in the graph.
type DoctorMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	_Doctor_Name           *string
	_Doctor_Password       *string
	_Doctor_Email          *string
	_Doctor_tel            *string
	clearedFields          map[string]struct{}
	doctor_diagnose        map[int]struct{}
	removeddoctor_diagnose map[int]struct{}
	done                   bool
	oldValue               func(context.Context) (*Doctor, error)
}

var _ ent.Mutation = (*DoctorMutation)(nil)

// doctorOption allows to manage the mutation configuration using functional options.
type doctorOption func(*DoctorMutation)

// newDoctorMutation creates new mutation for $n.Name.
func newDoctorMutation(c config, op Op, opts ...doctorOption) *DoctorMutation {
	m := &DoctorMutation{
		config:        c,
		op:            op,
		typ:           TypeDoctor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDoctorID sets the id field of the mutation.
func withDoctorID(id int) doctorOption {
	return func(m *DoctorMutation) {
		var (
			err   error
			once  sync.Once
			value *Doctor
		)
		m.oldValue = func(ctx context.Context) (*Doctor, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Doctor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDoctor sets the old Doctor of the mutation.
func withDoctor(node *Doctor) doctorOption {
	return func(m *DoctorMutation) {
		m.oldValue = func(context.Context) (*Doctor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DoctorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DoctorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DoctorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDoctorName sets the Doctor_Name field.
func (m *DoctorMutation) SetDoctorName(s string) {
	m._Doctor_Name = &s
}

// DoctorName returns the Doctor_Name value in the mutation.
func (m *DoctorMutation) DoctorName() (r string, exists bool) {
	v := m._Doctor_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorName returns the old Doctor_Name value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorName: %w", err)
	}
	return oldValue.DoctorName, nil
}

// ResetDoctorName reset all changes of the "Doctor_Name" field.
func (m *DoctorMutation) ResetDoctorName() {
	m._Doctor_Name = nil
}

// SetDoctorPassword sets the Doctor_Password field.
func (m *DoctorMutation) SetDoctorPassword(s string) {
	m._Doctor_Password = &s
}

// DoctorPassword returns the Doctor_Password value in the mutation.
func (m *DoctorMutation) DoctorPassword() (r string, exists bool) {
	v := m._Doctor_Password
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorPassword returns the old Doctor_Password value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorPassword: %w", err)
	}
	return oldValue.DoctorPassword, nil
}

// ResetDoctorPassword reset all changes of the "Doctor_Password" field.
func (m *DoctorMutation) ResetDoctorPassword() {
	m._Doctor_Password = nil
}

// SetDoctorEmail sets the Doctor_Email field.
func (m *DoctorMutation) SetDoctorEmail(s string) {
	m._Doctor_Email = &s
}

// DoctorEmail returns the Doctor_Email value in the mutation.
func (m *DoctorMutation) DoctorEmail() (r string, exists bool) {
	v := m._Doctor_Email
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorEmail returns the old Doctor_Email value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorEmail: %w", err)
	}
	return oldValue.DoctorEmail, nil
}

// ResetDoctorEmail reset all changes of the "Doctor_Email" field.
func (m *DoctorMutation) ResetDoctorEmail() {
	m._Doctor_Email = nil
}

// SetDoctorTel sets the Doctor_tel field.
func (m *DoctorMutation) SetDoctorTel(s string) {
	m._Doctor_tel = &s
}

// DoctorTel returns the Doctor_tel value in the mutation.
func (m *DoctorMutation) DoctorTel() (r string, exists bool) {
	v := m._Doctor_tel
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorTel returns the old Doctor_tel value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorTel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorTel is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorTel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorTel: %w", err)
	}
	return oldValue.DoctorTel, nil
}

// ResetDoctorTel reset all changes of the "Doctor_tel" field.
func (m *DoctorMutation) ResetDoctorTel() {
	m._Doctor_tel = nil
}

// AddDoctorDiagnoseIDs adds the doctor_diagnose edge to Diagnose by ids.
func (m *DoctorMutation) AddDoctorDiagnoseIDs(ids ...int) {
	if m.doctor_diagnose == nil {
		m.doctor_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.doctor_diagnose[ids[i]] = struct{}{}
	}
}

// RemoveDoctorDiagnoseIDs removes the doctor_diagnose edge to Diagnose by ids.
func (m *DoctorMutation) RemoveDoctorDiagnoseIDs(ids ...int) {
	if m.removeddoctor_diagnose == nil {
		m.removeddoctor_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddoctor_diagnose[ids[i]] = struct{}{}
	}
}

// RemovedDoctorDiagnose returns the removed ids of doctor_diagnose.
func (m *DoctorMutation) RemovedDoctorDiagnoseIDs() (ids []int) {
	for id := range m.removeddoctor_diagnose {
		ids = append(ids, id)
	}
	return
}

// DoctorDiagnoseIDs returns the doctor_diagnose ids in the mutation.
func (m *DoctorMutation) DoctorDiagnoseIDs() (ids []int) {
	for id := range m.doctor_diagnose {
		ids = append(ids, id)
	}
	return
}

// ResetDoctorDiagnose reset all changes of the "doctor_diagnose" edge.
func (m *DoctorMutation) ResetDoctorDiagnose() {
	m.doctor_diagnose = nil
	m.removeddoctor_diagnose = nil
}

// Op returns the operation name.
func (m *DoctorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Doctor).
func (m *DoctorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DoctorMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._Doctor_Name != nil {
		fields = append(fields, doctor.FieldDoctorName)
	}
	if m._Doctor_Password != nil {
		fields = append(fields, doctor.FieldDoctorPassword)
	}
	if m._Doctor_Email != nil {
		fields = append(fields, doctor.FieldDoctorEmail)
	}
	if m._Doctor_tel != nil {
		fields = append(fields, doctor.FieldDoctorTel)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DoctorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case doctor.FieldDoctorName:
		return m.DoctorName()
	case doctor.FieldDoctorPassword:
		return m.DoctorPassword()
	case doctor.FieldDoctorEmail:
		return m.DoctorEmail()
	case doctor.FieldDoctorTel:
		return m.DoctorTel()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DoctorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case doctor.FieldDoctorName:
		return m.OldDoctorName(ctx)
	case doctor.FieldDoctorPassword:
		return m.OldDoctorPassword(ctx)
	case doctor.FieldDoctorEmail:
		return m.OldDoctorEmail(ctx)
	case doctor.FieldDoctorTel:
		return m.OldDoctorTel(ctx)
	}
	return nil, fmt.Errorf("unknown Doctor field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case doctor.FieldDoctorName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorName(v)
		return nil
	case doctor.FieldDoctorPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorPassword(v)
		return nil
	case doctor.FieldDoctorEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorEmail(v)
		return nil
	case doctor.FieldDoctorTel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorTel(v)
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DoctorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DoctorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DoctorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DoctorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DoctorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Doctor nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DoctorMutation) ResetField(name string) error {
	switch name {
	case doctor.FieldDoctorName:
		m.ResetDoctorName()
		return nil
	case doctor.FieldDoctorPassword:
		m.ResetDoctorPassword()
		return nil
	case doctor.FieldDoctorEmail:
		m.ResetDoctorEmail()
		return nil
	case doctor.FieldDoctorTel:
		m.ResetDoctorTel()
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DoctorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.doctor_diagnose != nil {
		edges = append(edges, doctor.EdgeDoctorDiagnose)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DoctorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgeDoctorDiagnose:
		ids := make([]ent.Value, 0, len(m.doctor_diagnose))
		for id := range m.doctor_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DoctorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddoctor_diagnose != nil {
		edges = append(edges, doctor.EdgeDoctorDiagnose)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DoctorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgeDoctorDiagnose:
		ids := make([]ent.Value, 0, len(m.removeddoctor_diagnose))
		for id := range m.removeddoctor_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DoctorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DoctorMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DoctorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DoctorMutation) ResetEdge(name string) error {
	switch name {
	case doctor.EdgeDoctorDiagnose:
		m.ResetDoctorDiagnose()
		return nil
	}
	return fmt.Errorf("unknown Doctor edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	_Patient_Name           *string
	_Patient_Age            *string
	_Patient_Weight         *string
	_Patient_Height         *string
	_Patient_Prefix         *string
	_Patient_Gender         *string
	_Patient_Blood          *string
	clearedFields           map[string]struct{}
	patient_diagnose        map[int]struct{}
	removedpatient_diagnose map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPatientName sets the Patient_Name field.
func (m *PatientMutation) SetPatientName(s string) {
	m._Patient_Name = &s
}

// PatientName returns the Patient_Name value in the mutation.
func (m *PatientMutation) PatientName() (r string, exists bool) {
	v := m._Patient_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old Patient_Name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName reset all changes of the "Patient_Name" field.
func (m *PatientMutation) ResetPatientName() {
	m._Patient_Name = nil
}

// SetPatientAge sets the Patient_Age field.
func (m *PatientMutation) SetPatientAge(s string) {
	m._Patient_Age = &s
}

// PatientAge returns the Patient_Age value in the mutation.
func (m *PatientMutation) PatientAge() (r string, exists bool) {
	v := m._Patient_Age
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientAge returns the old Patient_Age value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientAge(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientAge: %w", err)
	}
	return oldValue.PatientAge, nil
}

// ResetPatientAge reset all changes of the "Patient_Age" field.
func (m *PatientMutation) ResetPatientAge() {
	m._Patient_Age = nil
}

// SetPatientWeight sets the Patient_Weight field.
func (m *PatientMutation) SetPatientWeight(s string) {
	m._Patient_Weight = &s
}

// PatientWeight returns the Patient_Weight value in the mutation.
func (m *PatientMutation) PatientWeight() (r string, exists bool) {
	v := m._Patient_Weight
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientWeight returns the old Patient_Weight value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientWeight(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientWeight is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientWeight: %w", err)
	}
	return oldValue.PatientWeight, nil
}

// ResetPatientWeight reset all changes of the "Patient_Weight" field.
func (m *PatientMutation) ResetPatientWeight() {
	m._Patient_Weight = nil
}

// SetPatientHeight sets the Patient_Height field.
func (m *PatientMutation) SetPatientHeight(s string) {
	m._Patient_Height = &s
}

// PatientHeight returns the Patient_Height value in the mutation.
func (m *PatientMutation) PatientHeight() (r string, exists bool) {
	v := m._Patient_Height
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientHeight returns the old Patient_Height value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientHeight(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientHeight is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientHeight: %w", err)
	}
	return oldValue.PatientHeight, nil
}

// ResetPatientHeight reset all changes of the "Patient_Height" field.
func (m *PatientMutation) ResetPatientHeight() {
	m._Patient_Height = nil
}

// SetPatientPrefix sets the Patient_Prefix field.
func (m *PatientMutation) SetPatientPrefix(s string) {
	m._Patient_Prefix = &s
}

// PatientPrefix returns the Patient_Prefix value in the mutation.
func (m *PatientMutation) PatientPrefix() (r string, exists bool) {
	v := m._Patient_Prefix
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientPrefix returns the old Patient_Prefix value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientPrefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientPrefix is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientPrefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientPrefix: %w", err)
	}
	return oldValue.PatientPrefix, nil
}

// ResetPatientPrefix reset all changes of the "Patient_Prefix" field.
func (m *PatientMutation) ResetPatientPrefix() {
	m._Patient_Prefix = nil
}

// SetPatientGender sets the Patient_Gender field.
func (m *PatientMutation) SetPatientGender(s string) {
	m._Patient_Gender = &s
}

// PatientGender returns the Patient_Gender value in the mutation.
func (m *PatientMutation) PatientGender() (r string, exists bool) {
	v := m._Patient_Gender
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientGender returns the old Patient_Gender value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientGender is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientGender: %w", err)
	}
	return oldValue.PatientGender, nil
}

// ResetPatientGender reset all changes of the "Patient_Gender" field.
func (m *PatientMutation) ResetPatientGender() {
	m._Patient_Gender = nil
}

// SetPatientBlood sets the Patient_Blood field.
func (m *PatientMutation) SetPatientBlood(s string) {
	m._Patient_Blood = &s
}

// PatientBlood returns the Patient_Blood value in the mutation.
func (m *PatientMutation) PatientBlood() (r string, exists bool) {
	v := m._Patient_Blood
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientBlood returns the old Patient_Blood value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientBlood(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientBlood is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientBlood requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientBlood: %w", err)
	}
	return oldValue.PatientBlood, nil
}

// ResetPatientBlood reset all changes of the "Patient_Blood" field.
func (m *PatientMutation) ResetPatientBlood() {
	m._Patient_Blood = nil
}

// AddPatientDiagnoseIDs adds the patient_diagnose edge to Diagnose by ids.
func (m *PatientMutation) AddPatientDiagnoseIDs(ids ...int) {
	if m.patient_diagnose == nil {
		m.patient_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.patient_diagnose[ids[i]] = struct{}{}
	}
}

// RemovePatientDiagnoseIDs removes the patient_diagnose edge to Diagnose by ids.
func (m *PatientMutation) RemovePatientDiagnoseIDs(ids ...int) {
	if m.removedpatient_diagnose == nil {
		m.removedpatient_diagnose = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient_diagnose[ids[i]] = struct{}{}
	}
}

// RemovedPatientDiagnose returns the removed ids of patient_diagnose.
func (m *PatientMutation) RemovedPatientDiagnoseIDs() (ids []int) {
	for id := range m.removedpatient_diagnose {
		ids = append(ids, id)
	}
	return
}

// PatientDiagnoseIDs returns the patient_diagnose ids in the mutation.
func (m *PatientMutation) PatientDiagnoseIDs() (ids []int) {
	for id := range m.patient_diagnose {
		ids = append(ids, id)
	}
	return
}

// ResetPatientDiagnose reset all changes of the "patient_diagnose" edge.
func (m *PatientMutation) ResetPatientDiagnose() {
	m.patient_diagnose = nil
	m.removedpatient_diagnose = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m._Patient_Name != nil {
		fields = append(fields, patient.FieldPatientName)
	}
	if m._Patient_Age != nil {
		fields = append(fields, patient.FieldPatientAge)
	}
	if m._Patient_Weight != nil {
		fields = append(fields, patient.FieldPatientWeight)
	}
	if m._Patient_Height != nil {
		fields = append(fields, patient.FieldPatientHeight)
	}
	if m._Patient_Prefix != nil {
		fields = append(fields, patient.FieldPatientPrefix)
	}
	if m._Patient_Gender != nil {
		fields = append(fields, patient.FieldPatientGender)
	}
	if m._Patient_Blood != nil {
		fields = append(fields, patient.FieldPatientBlood)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientName:
		return m.PatientName()
	case patient.FieldPatientAge:
		return m.PatientAge()
	case patient.FieldPatientWeight:
		return m.PatientWeight()
	case patient.FieldPatientHeight:
		return m.PatientHeight()
	case patient.FieldPatientPrefix:
		return m.PatientPrefix()
	case patient.FieldPatientGender:
		return m.PatientGender()
	case patient.FieldPatientBlood:
		return m.PatientBlood()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPatientName:
		return m.OldPatientName(ctx)
	case patient.FieldPatientAge:
		return m.OldPatientAge(ctx)
	case patient.FieldPatientWeight:
		return m.OldPatientWeight(ctx)
	case patient.FieldPatientHeight:
		return m.OldPatientHeight(ctx)
	case patient.FieldPatientPrefix:
		return m.OldPatientPrefix(ctx)
	case patient.FieldPatientGender:
		return m.OldPatientGender(ctx)
	case patient.FieldPatientBlood:
		return m.OldPatientBlood(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	case patient.FieldPatientAge:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientAge(v)
		return nil
	case patient.FieldPatientWeight:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientWeight(v)
		return nil
	case patient.FieldPatientHeight:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientHeight(v)
		return nil
	case patient.FieldPatientPrefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientPrefix(v)
		return nil
	case patient.FieldPatientGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientGender(v)
		return nil
	case patient.FieldPatientBlood:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientBlood(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPatientName:
		m.ResetPatientName()
		return nil
	case patient.FieldPatientAge:
		m.ResetPatientAge()
		return nil
	case patient.FieldPatientWeight:
		m.ResetPatientWeight()
		return nil
	case patient.FieldPatientHeight:
		m.ResetPatientHeight()
		return nil
	case patient.FieldPatientPrefix:
		m.ResetPatientPrefix()
		return nil
	case patient.FieldPatientGender:
		m.ResetPatientGender()
		return nil
	case patient.FieldPatientBlood:
		m.ResetPatientBlood()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient_diagnose != nil {
		edges = append(edges, patient.EdgePatientDiagnose)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatientDiagnose:
		ids := make([]ent.Value, 0, len(m.patient_diagnose))
		for id := range m.patient_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient_diagnose != nil {
		edges = append(edges, patient.EdgePatientDiagnose)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatientDiagnose:
		ids := make([]ent.Value, 0, len(m.removedpatient_diagnose))
		for id := range m.removedpatient_diagnose {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgePatientDiagnose:
		m.ResetPatientDiagnose()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}
